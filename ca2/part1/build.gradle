plugins {
    // Apply the application plugin to add support for building a Java application
    id 'application'
}

repositories {
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // Use Apache Log4J for logging
    implementation 'org.apache.logging.log4j:log4j-api:2.11.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.11.2'
    testImplementation 'junit:junit:4.12'
}

// Define the main class for the application
application {
    mainClass.set('basic_demo.App')
}

description = "A trivial Gradle build"

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    manifest {
        attributes "Main-Class": "basic_demo.App"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register('runClient', JavaExec) {
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001"
    dependsOn classes

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('basic_demo.ChatClientApp')

    args = ['localhost', '59001']
}

tasks.register('runServer', JavaExec) {
    group = "DevOps"
    description = "Launches a chat server that listens on port 59001"
    dependsOn classes

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('basic_demo.ChatServerApp')

    args = ['59001']
}

tasks.register('backup', Copy) {
    from 'src'
    into 'backup'
}

tasks.register('createZip', Zip) {
    from 'src'
    archiveFileName.set('src.zip')
    destinationDirectory.set(file('zipFile'))
}
