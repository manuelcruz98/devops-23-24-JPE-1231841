<project name="TutorialApplication" default="build">

    <!-- Define properties -->
    <property name="src.dir" value="src/main/java" />
    <property name="build.dir" value="build" />
    <property name="dist.dir" value="dist" />
    <property name="lib.dir" value="lib" />
    <property name="webapp.dir" value="src/main/webapp" />
    <property name="slf4j.version" value="2.0.12" />
    <property name="slf4j.api.jar" value="${lib.dir}/slf4j-api-${slf4j.version}.jar" />
    <property name="logback.version" value="1.2.6" />
    <property name="logback.classic.jar" value="${lib.dir}/logback-classic-${logback.version}.jar" />


    <!-- Compile source code -->
    <target name="compile">
        <mkdir dir="${build.dir}/classes" />
        <javac srcdir="${src.dir}" destdir="${build.dir}/classes" includeantruntime="false">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
                <pathelement location="${slf4j.api.jar}" />
                <pathelement location="${logback.classic.jar}" />
            </classpath>
        </javac>
    </target>

    <!-- Copy frontend assets -->
    <target name="copy-resources">
        <copy todir="${build.dir}/classes">
            <fileset dir="${webapp.dir}" />
        </copy>
    </target>

    <!-- Package the application -->
    <target name="build" depends="compile">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/myapp.jar" basedir="${build.dir}/classes" >
            <mappedresources>
                <fileset dir="${lib.dir}" />
                <globmapper from="*" to="BOOT-INF/lib/*"/>
            </mappedresources>
            <fileset file="${lib.dir}/spring-boot-loader-tools-2.7.18.jar" />
            <manifest>
                <attribute name="Main-Class" value="org.springframework.boot.loader.JarLauncher" />
                <attribute name="Start-Class" value="com.greglturnquist.payroll/ReactAndSpringDataRestApplication.java" />
            </manifest>
        </jar>
    </target>

    <!-- Copy the generated JAR to dist folder -->
    <target name="copy-to-dist" depends="build">
        <copy file="${dist.dir}/myapp.jar" todir="${basedir}/${dist.dir}" />
    </target>

    <!-- Delete webpack generated files -->
    <target name="clean-webpack" description="Delete webpack generated files">
        <delete>
            <fileset dir="src/main/resources/static/built"/>
        </delete>
    </target>

    <target name="clean" depends="clean-webpack">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <target name="start-webpack-server" description="Start webpack development server">
        <exec executable="cmd" dir="${basedir}" failonerror="true">
            <arg value="/c" />
            <arg value="npx" />
            <arg value="webpack-dev-server" />
            <arg value="--config" />
            <arg value="webpack.config.js" />
        </exec>
    </target>

    <target name="start" description="Start the application" depends="build, start-webpack-server">
        <java jar="${dist.dir}/myapp.jar" fork="true" spawn="true"/>
        <echo message="Application started."/>
    </target>

    <!-- Default target -->
    <target name="default" depends="clean, build" />

</project>
